version: 2.1

jobs:
  build:
    docker:
      - image: circleci/android:api-29
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      #      - run:
      #         name: Chmod permissions #if permission for Gradlew Dependencies fail, use this.
      #         command: sudo chmod +x ./gradlew

      # Pull down the project’s dependencies.
      # Normally you never call this task directly since it’s done automatically when it’s needed,
      # but calling it directly allows us to insert a save_cache step that will store the dependencies
      # in order to speed things up for next time
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Unit tests
          command: ./gradlew testRelease
      - run:
          name: Start emulator
          background: true
          command: |
            avdmanager=$ANDROID_HOME/tools/bin/avdmanager
            sdkmanager=$ANDROID_HOME/tools/bin/sdkmanager
            emulator=$ANDROID_HOME/tools/emulator
            adb=$ANDROID_HOME/platform-tools/adb

            name=CI_primary_29_x86_64

            echo "export LD_LIBRARY_PATH"
            export LD_LIBRARY_PATH=${ANDROID_HOME}/emulator/lib64:${ANDROID_HOME}/emulator/lib64/qt/lib

            echo "downloading system-images"
            $sdkmanager "system-images;android-29;google_apis_playstore;x86_64"

            # chech available AVDs
            emulators="$($avdmanager list avd)"

            if [[ $emulators != *$name* ]]; then
              echo "creating new AVD"
              echo no | $avdmanager --verbose create avd --name $name --device "pixel" --package "system-images;android-29;google_apis_playstore;x86_64" --abi "x86_64"
            fi

            echo "starting AVD"
            $emulator -avd $name -no-snapshot -wipe-data -accel auto -no-boot-anim -delay-adb &

            echo "waining for boot"
            $adb wait-for-device

            echo "booted"
      - run:
          name: Instrumented tests
          command: ./gradlew connectedAndroidTest
      - run:
          name: Close emulator
          command: adb -s emulator-5554 emu kill
      - run:
          name: Test coverage report
          command: ./gradlew testCoverageReport
      - store_artifacts:
          path: app/build/reports/jacoco/testCoverageReport/html/
          destination: jacoco
